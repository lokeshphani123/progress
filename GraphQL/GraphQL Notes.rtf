{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red203\green203\blue202;\red141\green213\blue254;\red194\green125\blue100;\red202\green202\blue202;\red34\green255\blue6;
\red255\green255\blue255;\red203\green203\blue202;\red142\green213\blue255;\red194\green125\blue100;\red202\green202\blue202;
\red255\green255\blue255;\red141\green213\blue254;\red203\green203\blue202;\red71\green138\blue206;\red67\green180\blue255;
\red67\green192\blue160;\red212\green213\blue153;\red194\green125\blue100;\red202\green202\blue202;\red255\green255\blue255;
\red71\green138\blue206;\red67\green180\blue255;\red212\green213\blue153;\red183\green111\blue179;\red167\green197\blue151;
\red67\green192\blue160;\red0\green0\blue0;\red255\green255\blue255;\red204\green204\blue202;\red203\green203\blue202;
}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99985\c0;\cssrgb\c0\c0\c0;
\cssrgb\c83320\c83320\c83112;\cssrgb\c61545\c86704\c99884;\cssrgb\c80772\c56796\c46790;\cssrgb\c83137\c83137\c83137;\cssrgb\c0\c100000\c0;
\cssrgb\c100000\c100000\c99971\c0;\cssrgb\c83411\c83411\c83099;\cssrgb\c61729\c86919\c100000;\cssrgb\c80765\c56762\c46655;\cssrgb\c83137\c83137\c83137;
\cssrgb\c100000\c100000\c99985\c0;\cssrgb\c61545\c86704\c99884;\cssrgb\c83320\c83320\c83112;\cssrgb\c34146\c61677\c84338;\cssrgb\c31469\c76285\c100000;
\cssrgb\c30631\c78928\c69023;\cssrgb\c86247\c86215\c66392;\cssrgb\c80772\c56796\c46790;\cssrgb\c83229\c83229\c83125;\cssrgb\c100000\c100000\c100000\c0;
\cssrgb\c34146\c61677\c84338;\cssrgb\c31469\c76285\c100000;\cssrgb\c86247\c86215\c66392;\cssrgb\c77407\c52698\c75307;\cssrgb\c71035\c80830\c65726;
\cssrgb\c30631\c78928\c69023;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99971\c0;\cssrgb\c83591\c83590\c83069;\cssrgb\c83501\c83501\c83084;
}
\margl1440\margr1440\vieww30040\viewh18900\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 What is GraphQL?\
- Say there are  multiple clients and one server that might have python, node, java etc\
- Rest API provides multiple endpoint while the GraphQL provides a single endpoint\
\
Why GraphQL?\
GraphQL creates fast and flexible APIs, giving clients complete control to ask for just the data they need.\
Fewer HTTP requests. Flexible data querying. Less code to manage.\
- It is fast (Rest API provides multiple endpoint while the GraphQL provides a single endpoint. Instead of server determine what data is needed GraphQL makes client determine what data is needed)\
- It is flexible (Facebook had a problem fetching data from backend for the desktop version vs the mobile version. Obviously, mobile version has low real estate like user doesn\'92t need comments until clicked unlike the desktop version. Therefore, for a call of the desktop version backend might have to do 3 db calls while the backend for mobile has to do just 1)\
- GraphQL is easy to maintain (In case of REST we need to add additional endpoint while in GraphQL we just need to change the client\'92s query)\
\
TIP:\
	- How to Auto pick changes in project and start server? \
\cf2 \cb3 		1. Add \'91\cf2 \cb3 \expnd0\expndtw0\kerning0
npm install --save-dev nodemon\cf2 \cb3 \kerning1\expnd0\expndtw0 \'92\
		2. \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf2 \cb3 \strokec6 "start"\cf2 \cb3 \strokec5 : \cf2 \cb3 \strokec7 "nodemon src/index.js --exec babel-node"\cf2 \cb3 \strokec5 ,\
\pard\pardeftab720\partightenfactor0

\f1 \cf8 \cb1 \strokec8 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
VS Code Packages:\
- Npm\
- Npm	Intellisense\
- GraphQL for VS Code\
- Docker\
- Duplicate Action\
- Babel ES6/ES7\
- Beautify JSON, TS, JS\
\
What is GraphQL?\
Graph is the visual representation of the data and how is related.\
ex: User posts post and comments \
	- User: id, name, age\
	- Post: id, title, body, published\
	- Comment: id, text\
Relations: \
	- A user can have multiple posts\
	- A post can have multiple comments, \
	- An user can have multiple comments\
\
GraphQL queries:\
Graphql-demo.mead.io\
	- Query allows us to fetch data\
\cf9 		ex 1: query \{\
			hello\
			courseInstructor\
			\}\
		ex 2: query \{\
			hello\
			courseInstructor\
			\}\
\
		ex 3:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs26 \cf9 \kerning1\expnd1\expndtw6
			query\{\
			hello\
		  	courseInstructor\
			 course\
			  me\{\
			    id\
			    name\
			    email\
			    posts\{\
				      id\
				      title\
				      body\
				      published\
				      author\{\
				        name\
				      \}\
				    \}\
			    comments\{\
				      id\
				      text\
				      post\{\
				        title\
				      \}\
			      author\{\
			        name\
				      \}\
				    \}\
				  \}\
				\}\kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \
	- Mutation allows to change data\
	- Subscription allows to watch data for changes\
Project setting:\
	- babblejs.io takes in JS and outputs best JS tuned code\
	- Create a project folder\
	- run \'92npm init\'92\
	- npm install babel-cli babel-env\
	- check if \'91.babelrc\'92 file is created\
	- In babelrc file check if presets [\'93env\'94] is present:\
		
\f1 \cf9 \cb10 \expnd0\expndtw0\kerning0
\{\
\pard\pardeftab720\partightenfactor0
\cf9 		  "presets": [\
		    "env"\
		  ]\
		\}\cf14 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
	- create src/index.js\
	- add console.log(\'93Hello\'94) to index.js\
	- in package.json add \'93start\'94:\'94babel-node src/index.js\'94\
	- run \'91npm start\'92 to check if the console.log is printed on the \cf9 terminal\cf0 \
	- To export and import ES6:\
		- Create myModule.js and add\
		- const message = \'91Some message from myModule.js\'92				- const location = \'91Texas\'92	\
		- const getGreeting = (name) => \{ return \'93Hello \'94+name; \}\
		- export \{ message, location as default, getGreeting \}\
		- Import it to the index.js\
		- import myLocation, \{ message, getGreeting \} from \'91./myModule.js\'92\
		- console.log(message, myLocation)\
		- console.log(myLocation(\'93Justin\'94))\
\
GraphQL & Nodejs:\cf9 \
\cf4 \cb15 	- In order to get GraphQL server use npm i 
\f1 \expnd0\expndtw0\kerning0
graphql-yoga\

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
	- There are multiple client for different language. \
	- Type Definitions (Application Schema): Describe the operations of our app and data structures.\
\cf9 		ex: cost typeDefs = `type Query \{\
						hello: String!\
						\}`\
		note: \'91!\'92 Above means don\'92t return null\cf0 \
\
	Resolver: They are set of functions for each of the operations that app do like multiply, addition and any other functions\
\cf9 		ex: const resolvers  =  \{\
			Query: \{\
				hello() \{\
					return \'91This is my first query!\'92\
				\}\
			\}\
		\}\cf0 \
\
	Server:\
\cf9 \cb15 		
\f1 \expnd0\expndtw0\kerning0
const server = new GraphQLServer(\{\
\pard\pardeftab720\partightenfactor0
\cf9 		    typeDefs,\
		    resolvers\
		\})\
\
		server.start(() => \{\
		    console.log('The server is up!')\
		\})\cf23 \cb24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf9 \cb1 \kerning1\expnd0\expndtw0 \
\cf4 Sclar Types in GraphQL:\
	- String, Boolean, Int, Float, ID\cf0  (Unique Identifier with all uppercase) and Custom types\
	- Arrays\
	ex:\
\pard\pardeftab720\partightenfactor0

\f1 \cf9 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\fi1650\partightenfactor0
\cf9 \cb3 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 typeDefs\cb3 \strokec5  = \cb3 \strokec7 `\cb3 \strokec5 \
\cb3 \strokec7     type Query \{\cb3 \strokec5 \
\cb3 \strokec7         employeeId: ID!\cb3 \strokec5 \
\cb3 \strokec7         employeeName: String!\cb3 \strokec5 \
\cb3 \strokec7         employeeAge: Int\cb3 \strokec5 \
\cb3 \strokec7         employeeCompany: Company!\cb3 \strokec5 \
\cb3 \strokec7         employeeNote(note: String!, date: String!): String!\cb3 \strokec5 \
\cb3 \strokec7         employeeProjects: [Project]!\cb3 \strokec5 \
\cb3 \strokec7     \}\cb3 \strokec5 \
\cb3 \strokec7     type Company \{\cb3 \strokec5 \
\cb3 \strokec7         companyId: ID!\cb3 \strokec5 \
\cb3 \strokec7         companyName: String!\cb3 \strokec5 \
\cb3 \strokec7         city: String!\cb3 \strokec5 \
\cb3 \strokec7         state: String!\cb3 \strokec5 \
\cb3 \strokec7         country: String!\cb3 \strokec5 \
\cb3 \strokec7     \}\cb3 \strokec5 \
\cb3 \strokec7     type Project \{\cb3 \strokec5 \
\cb3 \strokec7         projectId: ID!\cb3 \strokec5 \
\cb3 \strokec7         projectName: String!\cb3 \strokec5 \
\cb3 \strokec7         projectTenure: Float!\cb3 \strokec5 \
\cb3 \strokec7     \}\cb3 \strokec5 \
\cb3 \strokec7 `\cb3 \strokec5 \
\
\cb3 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 resolvers\cb3 \strokec5  = \{\
    \cb3 \strokec6 Query :\cb3 \strokec5  \{\
        \cb3 \strokec27 employeeId\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec29 567\cb3 \strokec5 ;\
        \},\
        \cb3 \strokec27 employeeName\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec7 "Nikhila"\cb3 \strokec5 ;\
        \},\
        \cb3 \strokec27 employeeAge\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec29 23\cb3 \strokec5 ;\
        \},\
        \cb3 \strokec27 employeeCompany\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \{\
                \cb3 \strokec6 companyId:\cb3 \strokec5  \cb3 \strokec29 1\cb3 \strokec5 ,\
                \cb3 \strokec6 companyName:\cb3 \strokec5  \cb3 \strokec7 "Amazon"\cb3 \strokec5 ,\
                \cb3 \strokec6 city:\cb3 \strokec5  \cb3 \strokec7 "Seattle"\cb3 \strokec5 ,\
                \cb3 \strokec6 state:\cb3 \strokec5  \cb3 \strokec7 "Washington"\cb3 \strokec5 ,\
                \cb3 \strokec6 country:\cb3 \strokec5  \cb3 \strokec7 "USA"\cb3 \strokec5 \
         \
            \};\
        \},\
        \cb3 \strokec27 employeeNote\cb3 \strokec5 (\cb3 \strokec6 parent\cb3 \strokec5 , \cb3 \strokec6 args\cb3 \strokec5 , \cb3 \strokec6 ctx\cb3 \strokec5 , \cb3 \strokec6 info\cb3 \strokec5 ) \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec7 "Note: "\cb3 \strokec5 +\cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 note\cb3 \strokec5 +\cb3 \strokec7 ". "\cb3 \strokec5 +\cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 date\cb3 \strokec5 \
        \},\
        \cb3 \strokec27 employeeProjects\cb3 \strokec5 ()\{\
            \cb3 \strokec28 return\cb3 \strokec5  [\{\
                \cb3 \strokec6 projectId:\cb3 \strokec5  \cb3 \strokec29 1\cb3 \strokec5 ,\
                \cb3 \strokec6 projectName:\cb3 \strokec5  \cb3 \strokec7 "Amazon Fresh"\cb3 \strokec5 ,\
                \cb3 \strokec6 projectTenure:\cb3 \strokec5  \cb3 \strokec29 3.5\cb3 \strokec5         \
            \},\
            \{\
                \cb3 \strokec6 projectId:\cb3 \strokec5  \cb3 \strokec29 2\cb3 \strokec5 ,\
                \cb3 \strokec6 projectName:\cb3 \strokec5  \cb3 \strokec7 "Amazon Retail"\cb3 \strokec5 ,\
                \cb3 \strokec6 projectTenure:\cb3 \strokec5  \cb3 \strokec29 5\cb3 \strokec5         \
            \},\
            \{\
                \cb3 \strokec6 projectId:\cb3 \strokec5  \cb3 \strokec29 3\cb3 \strokec5 ,\
                \cb3 \strokec6 projectName:\cb3 \strokec5  \cb3 \strokec7 "Amazon Shipping"\cb3 \strokec5 ,\
                \cb3 \strokec6 projectTenure:\cb3 \strokec5  \cb3 \strokec29 2.5\cb3 \strokec5         \
            \}]\
        \}\
    \}\
\}\
\
\
\cb3 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 server\cb3 \strokec5  = \cb3 \strokec25 new\cb3 \strokec5  \cb3 \strokec30 GraphQLServer\cb3 \strokec5 (\{\
    \cb3 \strokec6 typeDefs\cb3 \strokec5 , \cb3 \strokec6 resolvers\cb3 \strokec5 \
\})\
\
\cb3 \strokec26 server\cb3 \strokec5 .\cb3 \strokec27 start\cb3 \strokec5 (() \cb3 \strokec25 =>\cb3 \strokec5  \{\
    \cb3 \strokec6 console\cb3 \strokec5 .\cb3 \strokec27 log\cb3 \strokec5 (\cb3 \strokec7 "Server is up"\cb3 \strokec5 )\
\}\
)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
Arrays, Custom Arrays, Array Filtering:\
\
\pard\pardeftab720\fi1483\partightenfactor0

\f1 \cf9 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 projects\cb3 \strokec5  = [\{\
    \cb3 \strokec6 projectId:\cb3 \strokec5  \cb3 \strokec29 1\cb3 \strokec5 ,\
    \cb3 \strokec6 projectName:\cb3 \strokec5  \cb3 \strokec7 "Amazon Fresh"\cb3 \strokec5 ,\
    \cb3 \strokec6 projectTenure:\cb3 \strokec5  \cb3 \strokec29 3.5\cb3 \strokec5         \
\},\
\{\
    \cb3 \strokec6 projectId:\cb3 \strokec5  \cb3 \strokec29 2\cb3 \strokec5 ,\
    \cb3 \strokec6 projectName:\cb3 \strokec5  \cb3 \strokec7 "Amazon Retail"\cb3 \strokec5 ,\
    \cb3 \strokec6 projectTenure:\cb3 \strokec5  \cb3 \strokec29 5\cb3 \strokec5         \
\},\
\{\
    \cb3 \strokec6 projectId:\cb3 \strokec5  \cb3 \strokec29 3\cb3 \strokec5 ,\
    \cb3 \strokec6 projectName:\cb3 \strokec5  \cb3 \strokec7 "Amazon Shipping"\cb3 \strokec5 ,\
    \cb3 \strokec6 projectTenure:\cb3 \strokec5  \cb3 \strokec29 2.5\cb3 \strokec5         \
\}]\
\
\cb3 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 typeDefs\cb3 \strokec5  = \cb3 \strokec7 `\cb3 \strokec5 \
\cb3 \strokec7     type Query \{\cb3 \strokec5 \
\cb3 \strokec7         employeeId: ID!\cb3 \strokec5 \
\cb3 \strokec7         employeeName: String!\cb3 \strokec5 \
\cb3 \strokec7         employeeAge: Int\cb3 \strokec5 \
\cb3 \strokec7         employeeCompany: Company!\cb3 \strokec5 \
\cb3 \strokec7         employeeNote(note: String!, date: String!): String!\cb3 \strokec5 \
\cb3 \strokec7         employeeProjects(tenure: Float!, alphabet: String): [Project!]!\cb3 \strokec5 \
\cb3 \strokec7     \}\cb3 \strokec5 \
\cb3 \strokec7     type Company \{\cb3 \strokec5 \
\cb3 \strokec7         companyId: ID!\cb3 \strokec5 \
\cb3 \strokec7         companyName: String!\cb3 \strokec5 \
\cb3 \strokec7         city: String!\cb3 \strokec5 \
\cb3 \strokec7         state: String!\cb3 \strokec5 \
\cb3 \strokec7         country: String!\cb3 \strokec5 \
\cb3 \strokec7     \}\cb3 \strokec5 \
\cb3 \strokec7     type Project \{\cb3 \strokec5 \
\cb3 \strokec7         projectId: ID!\cb3 \strokec5 \
\cb3 \strokec7         projectName: String!\cb3 \strokec5 \
\cb3 \strokec7         projectTenure: Float!\cb3 \strokec5 \
\cb3 \strokec7     \}\cb3 \strokec5 \
\cb3 \strokec7 `\cb3 \strokec5 \
\
\cb3 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 resolvers\cb3 \strokec5  = \{\
    \cb3 \strokec6 Query :\cb3 \strokec5  \{\
        \cb3 \strokec27 employeeId\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec29 567\cb3 \strokec5 ;\
        \},\
        \cb3 \strokec27 employeeName\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec7 "Nikhila"\cb3 \strokec5 ;\
        \},\
        \cb3 \strokec27 employeeAge\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec29 23\cb3 \strokec5 ;\
        \},\
        \cb3 \strokec27 employeeCompany\cb3 \strokec5 () \{\
            \cb3 \strokec28 return\cb3 \strokec5  \{\
                \cb3 \strokec6 companyId:\cb3 \strokec5  \cb3 \strokec29 1\cb3 \strokec5 ,\
                \cb3 \strokec6 companyName:\cb3 \strokec5  \cb3 \strokec7 "Amazon"\cb3 \strokec5 ,\
                \cb3 \strokec6 city:\cb3 \strokec5  \cb3 \strokec7 "Seattle"\cb3 \strokec5 ,\
                \cb3 \strokec6 state:\cb3 \strokec5  \cb3 \strokec7 "Washington"\cb3 \strokec5 ,\
                \cb3 \strokec6 country:\cb3 \strokec5  \cb3 \strokec7 "USA"\cb3 \strokec5 \
         \
            \};\
        \},\
        \cb3 \strokec27 employeeNote\cb3 \strokec5 (\cb3 \strokec6 parent\cb3 \strokec5 , \cb3 \strokec6 args\cb3 \strokec5 , \cb3 \strokec6 ctx\cb3 \strokec5 , \cb3 \strokec6 info\cb3 \strokec5 ) \{\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec7 "Note: "\cb3 \strokec5 +\cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 note\cb3 \strokec5 +\cb3 \strokec7 ". "\cb3 \strokec5 +\cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 date\cb3 \strokec5 \
        \},\
        \cb3 \strokec27 employeeProjects\cb3 \strokec5 (\cb3 \strokec6 parent\cb3 \strokec5 , \cb3 \strokec6 args\cb3 \strokec5 , \cb3 \strokec6 ctx\cb3 \strokec5 , \cb3 \strokec6 info\cb3 \strokec5 )\{\
            \cb3 \strokec25 const\cb3 \strokec5  \cb3 \strokec26 tenureFilter\cb3 \strokec5  = \cb3 \strokec26 projects\cb3 \strokec5 .\cb3 \strokec27 filter\cb3 \strokec5 ((\cb3 \strokec6 project\cb3 \strokec5 ) \cb3 \strokec25 =>\cb3 \strokec5  \{\
                \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec6 project\cb3 \strokec5 .\cb3 \strokec6 projectTenure\cb3 \strokec5  >= \cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 tenure\cb3 \strokec5 \
            \})\
            \cb3 \strokec28 if\cb3 \strokec5 (\cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 alphabet\cb3 \strokec5 )\{\
                \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec26 tenureFilter\cb3 \strokec5 .\cb3 \strokec27 filter\cb3 \strokec5 ((\cb3 \strokec6 project\cb3 \strokec5 ) \cb3 \strokec25 =>\cb3 \strokec5  \{\
                    \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec6 project\cb3 \strokec5 .\cb3 \strokec6 projectName\cb3 \strokec5 .\cb3 \strokec27 toLowerCase\cb3 \strokec5 ().\cb3 \strokec27 includes\cb3 \strokec5 (\cb3 \strokec6 args\cb3 \strokec5 .\cb3 \strokec6 alphabet\cb3 \strokec5 .\cb3 \strokec27 toLowerCase\cb3 \strokec5 ())\
                \})    \
            \}\
            \cb3 \strokec28 return\cb3 \strokec5  \cb3 \strokec26 tenureFilter\cb3 \strokec5 \
        \}\
    \}\
\}\
\
\
\pard\pardeftab720\partightenfactor0
\cf31 \cb32 \strokec33 Mutation:\
	GraphQL client could be mobile, web browser or playground. For example if a user wants to signup then we check if the email exists or not and return the appropriate message.\

\f0 \cf31 \cb32 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}